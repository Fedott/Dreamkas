apply plugin: 'com.android.application'
apply plugin: 'android'
apply plugin: 'android-apt'


buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.stanfy.spoon:spoon-gradle-plugin:0.10.0'
    }
}

apply plugin: 'spoon'

repositories {
    maven {
        url "${System.getenv("ANDROID_HOME")}/extras/android/m2repository"
    }
    mavenCentral()
    jcenter()
}

android
{
    compileSdkVersion 21
    buildToolsVersion '21.0.1'

    lintOptions
    {
        abortOnError false
    }

    packagingOptions
    {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'LICENSE.txt'
    }

    defaultConfig
    {
        applicationId 'ru.dreamkas.pos'
        minSdkVersion 17
        targetSdkVersion 19

        //def host = "http://av.staging.api.lighthouse.pro"
        def host = "http://android.autotests.api.lighthouse.pro"
        if(project.hasProperty("server_address")){
            host = project.getProperty("server_address");
        }
        buildConfigField 'String', 'ServerAddress', '"' + host  + '"'
        versionCode 1
        versionName '0.113.4'
        testInstrumentationRunner 'com.google.android.apps.common.testing.testrunner.GoogleInstrumentationTestRunner'
    }

    sourceSets {


        main {
            androidTest.setRoot('src/androidTest')
            res.srcDirs = [
                    'src/main/res',
                    'src/main/res/layouts',
                    'src/main/res/layouts/activities',
                    'src/main/res/layouts/components',
                    'src/main/res/layouts/fragments',
                    'src/main/res/layouts/dialog_fragments',
                    'src/main/res/layouts/item_templates',
                    'src/main/res/layouts/misc'
            ]
        }
    }

    testOptions
    {
        reportDir = "$project.buildDir/reports/"
    }

    buildTypes
    {
        release
        {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug
        {
            applicationIdSuffix ".debug"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_6
        targetCompatibility JavaVersion.VERSION_1_7
    }

    productFlavors {
        dev {
            // The one for development/testing
        }
        live {
            // The flavour for releasing
        }
    }
}

task grantAnimationPermission(type: Exec, dependsOn: 'installDevDebug') { // or install{productFlavour}{buildType}
    //commandLine "adb shell pm grant ru.dreamkas.pos.debug.test android.permission.SET_ANIMATION_SCALE".split(' ')
    commandLine "adb shell pm grant ru.dreamkas.pos android.permission.SET_ANIMATION_SCALE".split(' ')
}

tasks.whenTaskAdded { task ->
    if (task.name.startsWith('connectedAndroidTest')) {
        task.dependsOn grantAnimationPermission
    }
}

def copyAndReplaceText(source, dest, Closure replaceText) {
    dest.write(replaceText(source.text))
}

// Override Data in Manifest - This can be done using different Manifest files for each flavor, this way there's no need to modify the manifest
/*android.applicationVariants.all { variant ->
    if (variant.name.startsWith('dev')) { // Where dev is the one you'll use to run Espresso tests
        System.out.println("Not removing the SET_ANIMATION_SCALE permission for $variant.name")
        return
    }

    System.out.println("Removing the SET_ANIMATION_SCALE permission for $variant.name")
    variant.processManifest.doLast {
        copyAndReplaceText(manifestOutputFile, manifestOutputFile) {
            def replaced = it.replace('<uses-permission android:name="android.permission.SET_ANIMATION_SCALE"/>', '');
            if (replaced.contains('SET_ANIMATION_SCALE')) {
                // For security, imagine an extra space is added before closing tag, then the replace would fail - TODO use regex
                throw new RuntimeException("Don't ship with this permission! android.permission.SET_ANIMATION_SCALE")
            }
            replaced
        }
    }
}*/

apt
{
    arguments
    {
        resourcePackageName android.defaultConfig.packageName
        androidManifestFile variant.processResources.manifestFile
    }
}

spoon
{
    debug = true;
    //noAnimation = true;
    if (project.hasProperty('spoonClassName')) {
        className = project.spoonClassName
    }
}

dependencies
        {
            provided 'com.jakewharton.espresso:espresso-support-v4:1.1-r3'
            androidTestCompile('com.jakewharton.espresso:espresso-support-v4:1.1-r3') {
                exclude group: 'com.android.support', module: 'support-v4'
            }
            androidTestCompile 'com.google.guava:guava:11.0.2'
            androidTestCompile 'com.squareup.spoon:spoon-client:1.1.0'
            androidTestCompile 'com.surftools:BeanstalkClient:1.4.6'
            apt "org.androidannotations:androidannotations:3.0"
            //compile 'com.android.support:support-v4:19.0.0'
            compile 'com.octo.android.robospice:robospice:1.4.12'
            compile 'com.octo.android.robospice:robospice-spring-android:1.4.12'
            compile 'org.springframework.android:spring-android-rest-template:1.0.1.RELEASE'
            compile 'com.fasterxml.jackson.core:jackson-databind:2.4.0'
            compile 'org.androidannotations:androidannotations-api:3.0'
            compile 'com.android.support:appcompat-v7:21.0.+'
            compile 'com.google.zxing:core:3.0.0'
            compile('com.rengwuxian.materialedittext:library:1.6.0') {
                exclude group: 'com.nineoldandroids', module: 'library'
            }
            compile project(':materialDesign')
            /*compile (project(':materialEditText')){
                                                    exclude group: 'com.nineoldandroids', module: 'library'
                                                }*/

        }



