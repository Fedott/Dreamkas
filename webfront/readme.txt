!!! Архитектура

    Сервер (backend) предоставялет базовое CRUD REST API. К нему подключаются клиенты и годяют туда-сюда XML. Основной клиент - приложение (webfront), представляющее из себя набор статических файлов, которые загружаются браузером.
    
    В корне лежат index.*.xml файлы используемые для запуска приложения. Внутри они содержат адреса серверов и ссылку на пакет с шаблонами. 
    
    lh/-mix/*.stage=release.* - это исходники собранные в один файл, используется для продакшена
    lh/-mix/*.stage=dev.* - содежат только сссылки на исходники с указанием их версии, используются при разработке

    При открытии индексных xml загружаются шаблоны, которые рисуют исходную пустую страничку к которой продключены все необходимые ресурсы. А также вставляется виджет lh_application.
    
    Скрипты отсплеживают появление виджетов в документе (по именам аттрибутов), инициализируют их в момент добавления и уничтожают в момент удаления (через метод destroy). 
    
    Объекты созданные через $jin_class каскадно уничтожают объекты которые хранят в своих полях. В частности, обработчики событий при уничтожении виджета будут также отвязаны, если помещены в поля объекта.
    
    Первичное хранение данных - в аттрибутах елементов. Стили также привязываются к ним. Виджеты лишь добавляют поведение. Аттрибут name используется для пометки данных. Используется в тестах, а также в сериализации форм в xml, который посылается серверу.
    
    Виджеты действуют строго в рамках своего элемента. Общение с внешним миром - через события. События умеют требовать чтобы их кто-нибудь поймал. Это всё удобно для тестирования. Единственный кто общается с внешним миром - lh_application.
    
    По ссылкам вида /lh/-mix/index.stage=*.doc.xml доступна собранная документация, содержащая демонстрацию всех используемых в приложении модулей с тестами.
    
    Сборку можно запустить вручную через lh_build.cmd либо она может осуществляться автоматом при изменении файлов исходников (lh_server_dev.cmd запускает сервер)
    
    Исходники организуются по принципу PMS: в корне лежат пакеты, в пакетах модули, в модулях файлы с исходниками. Модуль подключается целиком или не подключается вообще.
    
    Собираются все *.js, *.css, *.xsl, *.doc.xml из заданного пакета. Дополнительно по зависимостям подтягиваются модули из других пакетов.
    
    Для *.jam.js зависимости выявляются по именам вида "$package_module". Для xsl по аттрибутам с именем вида "package_module". Дополнительно можно указывать зависимости в *.meta.tree файлах.
    
    Для каждого исходника в имени файла может быть указана "плоскость" сборки вида ".key=value.". При сборке указываются плоскости сборки и в неё включаются все исходники которые имеют ту же плоскость, либо не имеют данного ключа вообще. Этот механизм позволяет иметь в одном модуле несколько версий исходников для разных окружений. Нарпимер, для nodejs и браузера, или для современных браузеров и устаревших.
    
!!! Стек технологий

    Шаблонизатор: xslt 1.0 (web-safe-subset)
    
    Сборщик ассетов: pms на nodejs
    
    Тесты: виджет wc_test на странице, в для автоматического прогона в браузерах используется testo (лежит в teamcity)
    
    Библиотеки модулей: jin, jq (биндинг для jquery и плагины к нему)

!!! Дополнительная литература

    О JAM и PMS: http://hyoo.ru/?article=Модули+в+JavaScript;author=Nin+Jin
    О Tree: http://hyoo.ru/?article=Формат+Tree;author=Nin+Jin
    Об именовании сущностей: http://habrahabr.ru/post/97670/
    О событийной модели: http://habrahabr.ru/post/173023/